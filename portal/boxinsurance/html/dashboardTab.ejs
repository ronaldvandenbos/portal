<div class="edit-icon btn hide_mobile" style="z-index:1000;max-height:100%;overflow-y:auto;opacity:0.95;">
  <span style="color: #222222; position: relative; font-size: 12px;">
    <i class="fa fa-question-circle-o" style="color:#F96F67" aria-hidden="true"></i>

    <div class="row">
      <div class="medium-12 columns">
        <% if(locals.user) { %>
          <form method="post" action="/invite-demo-account">
            <label>Collab your demo account</label>
            <div class="input-group">
              <input class="input-group-field" name="boxEmail" placeholder="username+demo@box.com" type="email">
              <div class="input-group-button">
                <input type="submit" class="button" value="Invite">
              </div>
            </div>
          </form>
        <% } %>
        <a class="alert button" onclick="deleteAllCookies()" href="/reset-customization">Reset Customization</a>
        <% if(locals.user) { %>
          <a href="/reset" class="alert button" onclick="preloader()">Reset Demo</a>
        <% } %>
        <label>
          <b>What did we just do?</b>
          </br>
          With your login from the home page we created two app users and placed them in two different
          groups: Claims Agent & Field Adjusters.
        </label>
        </br>
          <img style="width:50%;height:50%;margin-left:23%;" src="../img/appuser.png">
          <i class="fa fa-level-down" style="padding-left:170px;" aria-hidden="true"></i>
          <img style="width:50%;height:50%;margin-left:23%;margin-bottom:5%;" src="../img/groups.png">
          <label>
            <b>Talking Points</b>
            </br>
            All the tiles you see on your dashboard are Box folders. Attached to these folders are folder-level
            metadata that is surfaced on the front end. This could be used to present relevant information to the user
            or used to drive workflows forward depending on the metadata value.
          </label>
          <img style="width:80%;height:80%;margin-left:11%;margin-top:3%;" src="../img/folder-metadata.png">
          <label>
            <b>Features</b>
            </br>
            Go ahead and click on the "More Actions" button in the top right corner of your tile. This will expand into
            three actions you can take.
          </label>
          <img style="width:50%;height:50%;margin-left:23%;margin-top:3%;margin-bottom:3%;" src="../img/actions.png">
          <ul>
            <li>View Claim: Using the <b>Box Content Preview UI Kit</b></li>
            <li>Contact Client: Using <b>Twilio</b> and <b>Box Shared Link</b></li>
            <li>Approve Claim: Using <b>Box Folder Level Metadata</b> and <b>Invite Collaborator</b> to push this workflow onward to its next stage</li>
          </ul>
          <label>
          Go ahead and click on the "Hamburger Menu" button next to the avatar for Garret Kelley. This will expand into several options.
          If you click on the top-most "Open Folder" option this will take you to the user vault page showcasing the <b>Box Content Explorer</b>.
        </label>
        <img style="width:30%;height:30%;margin-left:37%;margin-top:3%;margin-bottom:10%;" src="../img/more-actions.png">

        <label>
          <b>Where to from here?</b>
          </br>
          After you have approved a claim you can then switch over to the <b>Field Adjuster</b> persona(second app user we created earlier) from the
          dropdown at the top left of the page.
        </label>
        <img style="width:50%;height:50%;margin-left:23%;margin-top:3%;margin-bottom:30%;" src="../img/persona.png">
      </div>
    </div>
  </span>
</div>
<style>
  ::-webkit-scrollbar {
      display: none;
  }
</style>

<script>


  function preloader() {
    document.getElementById("loader").style.display = 'block';
  }

  checkEdits();

  $(function() {
    // When edit button is checked, make content editable, call saveEdits
    $('#edit_btn').change(function() {
      if($(this).is(":checked")) {
        var editableElems = $(".editable");
        editableElems.attr("contenteditable", "true").attr("oninput", "saveEdits(this)");
        // $(".edit-icon").css("width", "180px");
        // $(".edit-icon").css("height", "60px");
      }
      // When not checked, remove editable attributes
      else {
        var editableElems = $(".editable");
        editableElems.removeAttr("contenteditable", "true").removeAttr("oninput", "saveEdits(this)");
        // $(".edit-icon").css("width", "35px");
        // $(".edit-icon").css("height", "30px");
      }
    });
  })
  function saveEdits(element) {

    var url = window.location.pathname
    var elementId = element.id
    var elementHtml = element.innerHTML.replace(/&nbsp;/gi,'').replace(/&amp;/gi,'&')
    // check if storage object exists
    // if it does, add to it
    // if it doesn't create new
    if(readCookie("text_replace")) {
      var cookie = replacePlus(readCookie("text_replace"))
      cookie = decodeURIComponent(cookie)
      cookie = decodeURLRecursively(cookie)
      //cookie = replaceEqualSign(cookie)
      cookie = $.parseJSON(cookie)
    }
    if(cookie != null && cookie[url] != null) {
      obj = cookie[url]
      obj[elementId] = elementHtml
      var newObj = {}
      newObj[url] = obj
    }
    else {
      var obj = {}
      obj[elementId] = elementHtml
      var newObj = {}
      newObj[url] = obj
    }
    newObj = JSON.stringify(newObj)
    createCookie("text_replace", encodeURIComponent(newObj))
  }

  function checkEdits() {
    var url = window.location.pathname
    // On page load, check elements that are editable
    var editElem = $(".editable");
    editElem = [].slice.call(editElem)
    // For each, replace element html with session stored text
    if(readCookie("text_replace")) {
      var cookie = readCookie("text_replace")
      cookie = decodeURIComponent(cookie)
      cookie = replacePlus(cookie)
      cookie = decodeURLRecursively(cookie)
      //cookie = replaceEqualSign(cookie)
      cookie = $.parseJSON(cookie)
    }
    else {
    var cookie = {}
    }
    if(readCookie("text_replace") != null && cookie[url] != null) {
      newObj = cookie[url]
      editElem.forEach(function (item, index) {
        console.log(item);
        var itemId = item.id
        if(newObj[item.id]!=null){
          var storedEdit = newObj[item.id]
          item.innerHTML = storedEdit;
        }
      })
    }
  }

  function createCookie(name,value,days) {
    var expires = "";
    if (days) {
    var date = new Date();
    date.setTime(date.getTime() + (days*24*60*60*1000));
      expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + value + expires + "; path=/";
  }

  function readCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for(var i=0;i < ca.length;i++) {
      var c = ca[i];
      while (c.charAt(0)==' ') c = c.substring(1,c.length);
      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
    }
    return null;
  }

  function deleteAllCookies() {
      var cookies = document.cookie.split(";");
      for (var i = 0; i < cookies.length; i++) {
          var cookie = cookies[i];
          var eqPos = cookie.indexOf("=");
          var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
          document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
      }
      location.reload();
  }

  function eraseCookie(name) {
    createCookie(name,"",-1);
  }

  function replacePlus(str) {
    return str.replace(/\+/g, " ");
  }

  function decodeURLRecursively(url) {
    if(ValidURL(url)) {
      return decodeURLRecursively(decodeURIComponent(url));
    }
    return url;
  }

  function ValidURL(str) {
    var regex = /(http|https):\/\/(\w+:{0,1}\w*)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/;
    if(!regex .test(str)) {
      return false;
    } else {
      return true;
    }
  }

</script>
