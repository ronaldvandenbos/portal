<div class="edit-icon btn hide_mobile" style="z-index:1000;max-height:100%;overflow-y:auto; opacity:0.95;">
  <span style="color: #222222; position: relative; font-size: 12px;">
    <i class="fa fa-question-circle-o" style="color:#F96F67;font-size:17px;margin-left:-88%;" aria-hidden="true"></i>

    <div class="row">
      <div class="medium-12 columns">
        </br>
        <span style="margin-left:-55%;">
          <b>Notable Box Features</b>
          </br>
          <div style="margin-top:3%;">The Field Adjuster is collabed into the claims folder</div>

          <img style="width:50%;height:50%;margin-left:1%;margin-top:3%;" src="../img/adjuster-folder.png">
          <div style="margin-top:3%;margin-left:-25%;">Box Content Explorer UI Kit</div>

          <img style="width:50%;height:50%;margin-left:1%;margin-top:3%;" src="../img/content-explorer.png">
          <div style="margin-top:3%;margin-left:-35%;">Box Uploader UI Kit</div>
          <li style="margin-left:-3%;">File uploaded will appear in vault above</li>
          <li style="margin-left:-7%;">Page needs to be refreshed manually</li>
          <img style="width:50%;height:50%;margin-left:1%;margin-top:3%;margin-bottom:30%;" src="../img/uploader.png">
        </br>
      </br>
        </span>
      </div>
    </div>
  </span>
</div>
<style>
  ::-webkit-scrollbar {
      display: none;
  }
</style>

<script>


  function preloader() {
    document.getElementById("loader").style.display = 'block';
  }

  checkEdits();

  $(function() {
    // When edit button is checked, make content editable, call saveEdits
    $('#edit_btn').change(function() {
      if($(this).is(":checked")) {
        var editableElems = $(".editable");
        editableElems.attr("contenteditable", "true").attr("oninput", "saveEdits(this)");
        // $(".edit-icon").css("width", "180px");
        // $(".edit-icon").css("height", "60px");
      }
      // When not checked, remove editable attributes
      else {
        var editableElems = $(".editable");
        editableElems.removeAttr("contenteditable", "true").removeAttr("oninput", "saveEdits(this)");
        // $(".edit-icon").css("width", "35px");
        // $(".edit-icon").css("height", "30px");
      }
    });
  })
  function saveEdits(element) {

    var url = window.location.pathname
    var elementId = element.id
    var elementHtml = element.innerHTML.replace(/&nbsp;/gi,'').replace(/&amp;/gi,'&')
    // check if storage object exists
    // if it does, add to it
    // if it doesn't create new
    if(readCookie("text_replace")) {
      var cookie = replacePlus(readCookie("text_replace"))
      cookie = decodeURIComponent(cookie)
      cookie = decodeURLRecursively(cookie)
      //cookie = replaceEqualSign(cookie)
      cookie = $.parseJSON(cookie)
    }
    if(cookie != null && cookie[url] != null) {
      obj = cookie[url]
      obj[elementId] = elementHtml
      var newObj = {}
      newObj[url] = obj
    }
    else {
      var obj = {}
      obj[elementId] = elementHtml
      var newObj = {}
      newObj[url] = obj
    }
    newObj = JSON.stringify(newObj)
    createCookie("text_replace", encodeURIComponent(newObj))
  }

  function checkEdits() {
    var url = window.location.pathname
    // On page load, check elements that are editable
    var editElem = $(".editable");
    editElem = [].slice.call(editElem)
    // For each, replace element html with session stored text
    if(readCookie("text_replace")) {
      var cookie = readCookie("text_replace")
      cookie = decodeURIComponent(cookie)
      cookie = replacePlus(cookie)
      cookie = decodeURLRecursively(cookie)
      //cookie = replaceEqualSign(cookie)
      cookie = $.parseJSON(cookie)
    }
    else {
    var cookie = {}
    }
    if(readCookie("text_replace") != null && cookie[url] != null) {
      newObj = cookie[url]
      editElem.forEach(function (item, index) {
        console.log(item);
        var itemId = item.id
        if(newObj[item.id]!=null){
          var storedEdit = newObj[item.id]
          item.innerHTML = storedEdit;
        }
      })
    }
  }

  function createCookie(name,value,days) {
    var expires = "";
    if (days) {
    var date = new Date();
    date.setTime(date.getTime() + (days*24*60*60*1000));
      expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + value + expires + "; path=/";
  }

  function readCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for(var i=0;i < ca.length;i++) {
      var c = ca[i];
      while (c.charAt(0)==' ') c = c.substring(1,c.length);
      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
    }
    return null;
  }

  function deleteAllCookies() {
      var cookies = document.cookie.split(";");
      for (var i = 0; i < cookies.length; i++) {
          var cookie = cookies[i];
          var eqPos = cookie.indexOf("=");
          var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
          document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
      }
      location.reload();
  }

  function eraseCookie(name) {
    createCookie(name,"",-1);
  }

  function replacePlus(str) {
    return str.replace(/\+/g, " ");
  }

  function decodeURLRecursively(url) {
    if(ValidURL(url)) {
      return decodeURLRecursively(decodeURIComponent(url));
    }
    return url;
  }

  function ValidURL(str) {
    var regex = /(http|https):\/\/(\w+:{0,1}\w*)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/;
    if(!regex .test(str)) {
      return false;
    } else {
      return true;
    }
  }

</script>
