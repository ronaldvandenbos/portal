{{#> base }}

{{#*inline "content-block"}}

				<!-- Box Content Explorer -->
				<div class="tab-pane show active mts" role="tabpanel" id="explorer">
					<p>access token: {{token}}</p>
					<div style="height:500px" class="pcontainer"></div>
				</div>

				<script src="https://cdn01.boxcdn.net/platform/elements/6.0.0/en-US/uploader.js"></script>
			  <link rel="stylesheet" href="https://cdn01.boxcdn.net/platform/elements/6.0.0/en-US/uploader.css" />

<script>
var contentUploader;
var conflictsMap = new Map();
var testResponseInterceptor = (response /* https://github.com/axios/axios#request-config */) => {
		if(response.type) {
			if(response.type=='error' && response.status=='409') {
				console.log(JSON.stringify(response));
				var name = response.context_info.conflicts.name;
				var conflictId = response.context_info.conflicts.id;
				conflictsMap.set(name,conflictId);
				console.log("name:" + name + " / " + "id:" + conflictId + " / " + conflictsMap.size);
			}
		}
	return response;
};
var uploadHandler = (function() {
	console.log("Upload triggered");
});
var testRequestInterceptor = (config /* https://github.com/axios/axios#response-config */) => {

	var method = config.method;
	console.log(config.url);
	if(method=='post' && config.url.includes('https://upload.box.com/api/2.0/files/content')) {
		var jsonRep = JSON.parse(config.data.attributes);
		console.log(config.data.attributes);
		if(jsonRep.name.endsWith('.pdf')) {
			console.log("drop this download");
			var diffURL = "https://api.box.com/2.0/files/badextension";
				config.method='get';
				config.url = diffURL;
			alert('we dont want your pdf files!');
		}

		}
    return config;
};

  var fileId = '{{id}}';
  var accessToken = '{{token}}';
 	contentUploader = new Box.ContentUploader();
	contentUploader.show(fileId, accessToken, {
		container: '.pcontainer',
		requestInterceptor:testRequestInterceptor
		//responseInterceptor:testResponseInterceptor,

	});
	contentUploader.on('complete', (data) => {
			console.log("All files successfully uploaded:" + JSON.stringify(data));
			conflictsMap.clear();
	});
	contentUploader.on('error', (data) => {
			console.log('Error:' + JSON.stringify(data));
			conflictsMap.clear();
	});

</script>

{{/inline}}

{{/base}}
